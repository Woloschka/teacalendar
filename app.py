# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from functools import partial
from datetime import datetime


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("")
        MainWindow.resize(912, 465)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("background-color: rgb(13, 17, 23);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.days_layout = QtWidgets.QHBoxLayout()
        self.days_layout.setObjectName("days_layout")



        self.verticalLayout.addLayout(self.days_layout)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.month_layout = QtWidgets.QVBoxLayout()
        self.month_layout.setSpacing(4)
        self.month_layout.setObjectName("month_layout")

        self.horizontalLayout_3.addLayout(self.month_layout)
        self.items_layout = QtWidgets.QGridLayout()
        self.items_layout.setObjectName("items_layout")
        self.items_layout.setSpacing(3)
        self.horizontalLayout_3.addLayout(self.items_layout)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(154, 153, 150);")
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.btn_1l = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_1l.sizePolicy().hasHeightForWidth())
        self.btn_1l.setSizePolicy(sizePolicy)
        self.btn_1l.setMinimumSize(QtCore.QSize(30, 30))
        self.btn_1l.setMaximumSize(QtCore.QSize(30, 30))
        self.btn_1l.setStyleSheet("background-color: rgb(17, 22, 29);")
        self.btn_1l.setText("")
        self.btn_1l.setObjectName("btn_1l")
        self.horizontalLayout.addWidget(self.btn_1l)
        self.btn_2l = QtWidgets.QPushButton(self.centralwidget)
        self.btn_2l.setMinimumSize(QtCore.QSize(30, 30))
        self.btn_2l.setMaximumSize(QtCore.QSize(30, 30))
        self.btn_2l.setStyleSheet("background-color: rgb(3, 58, 22);")
        self.btn_2l.setText("")
        self.btn_2l.setObjectName("btn_2l")
        self.horizontalLayout.addWidget(self.btn_2l)
        self.btn_3l = QtWidgets.QPushButton(self.centralwidget)
        self.btn_3l.setMinimumSize(QtCore.QSize(30, 30))
        self.btn_3l.setMaximumSize(QtCore.QSize(30, 30))
        self.btn_3l.setStyleSheet("background-color: rgb(25, 108, 46);")
        self.btn_3l.setText("")
        self.btn_3l.setObjectName("btn_3l")
        self.horizontalLayout.addWidget(self.btn_3l)
        self.btn_4l = QtWidgets.QPushButton(self.centralwidget)
        self.btn_4l.setMinimumSize(QtCore.QSize(30, 30))
        self.btn_4l.setMaximumSize(QtCore.QSize(30, 30))
        self.btn_4l.setStyleSheet("background-color: rgb(46, 160, 67);")
        self.btn_4l.setText("")
        self.btn_4l.setObjectName("btn_4l")
        self.horizontalLayout.addWidget(self.btn_4l)
        self.btn_5l = QtWidgets.QPushButton(self.centralwidget)
        self.btn_5l.setMaximumSize(QtCore.QSize(30, 30))
        self.btn_5l.setStyleSheet("background-color: rgb(86, 211, 100);")
        self.btn_5l.setText("")
        self.btn_5l.setObjectName("btn_5l")
        self.horizontalLayout.addWidget(self.btn_5l)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(154, 153, 150);")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        self.verticalLayout.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 912, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        
        self.label.setText(_translate("MainWindow", "Less"))
        self.label_2.setText(_translate("MainWindow", "More"))


class App(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowTitle("TeaCalendar")
        self.lavel = 0
        self.ui.btn_1l.clicked.connect(self.changeMod0)
        self.ui.btn_2l.clicked.connect(self.changeMod1)
        self.ui.btn_3l.clicked.connect(self.changeMod2)
        self.ui.btn_4l.clicked.connect(self.changeMod3)
        self.ui.btn_5l.clicked.connect(self.changeMod4)

        self.months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
        self.currentYear = datetime.now().year
        self.currentMonth = datetime.now().month
        self.currentDay = datetime.now().day
        print(self.currentMonth)
        print(self.currentDay)
        self.leapYear = False
        if (self.currentYear % 4 == 0) and (self.currentYear % 100 != 0 or self.currentYear % 400 == 0):
            self.leapYear = True


        self.blackListDate = [(1,29),(1,30),(3,30),(5,30),(7,30),(9,30),(9,30),(11,30)]
        if self.leapYear == False:
            self.blackListDate.append((1,28))
            


        for month in self.months:
            btn = QtWidgets.QPushButton(month)
            btn.setStyleSheet("""
                color: rgb(154, 153, 150);
                border: solid 0px #000;
                background-color: rgb(14, 17, 21);
            """)
            self.ui.month_layout.addWidget(btn) 

        btn_month = self.ui.month_layout.itemAt(self.currentMonth-1).widget()
        new_style_btn_month = btn_month.styleSheet() + "color: rgb(28, 113, 216);"
        btn_month.setStyleSheet(new_style_btn_month)
        
        
        for i in range(32):
            btn_day = QtWidgets.QPushButton(self.ui.centralwidget)
            btn_day.setStyleSheet("color: rgb(154, 153, 150);\n"
                                "border: solid 0px #000;\n"
                                "background-color: rgb(14, 17, 21);")
            btn_day.setText(str(i))
            self.ui.days_layout.addWidget(btn_day)
        
        btn_day = self.ui.days_layout.itemAt(self.currentDay).widget()
        new_style_btn_day = btn_day.styleSheet() + "color: rgb(28, 113, 216);"
        btn_day.setStyleSheet(new_style_btn_day)
        


        for y in range(31):
            for x in range(12):
                btn = QtWidgets.QPushButton(self.ui.centralwidget)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(btn.sizePolicy().hasHeightForWidth())
                btn.setSizePolicy(sizePolicy)
                btn.setMinimumSize(QtCore.QSize(25, 25))
                btn.setMaximumSize(QtCore.QSize(25, 25))
                btn.setStyleSheet("background-color: rgb(17, 22, 29);")
                btn.setText("")
                btn.setObjectName("0")
                btn.clicked.connect(partial(self.setValue, btn))
                

                self.ui.items_layout.addWidget(btn, x, y)

        



        with open("save.txt", "r") as save:
            data = save.read().strip()

        index = 0
        for y in range(31):
            for x in range(12):
                if index < len(data):
                    val = int(data[index])
                    self.lavel = val
                    btn = self.ui.items_layout.itemAtPosition(x, y).widget()
                    self.setValue(btn)
                    index += 1

        self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(1, 29).widget())
        self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(1, 30).widget())
        if self.leapYear == False:
            self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(1, 28).widget())
        self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(3, 30).widget())
        self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(5, 30).widget())
        self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(7, 30).widget())
        self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(9, 30).widget())
        self.ui.items_layout.removeWidget(self.ui.items_layout.itemAtPosition(11, 30).widget())

        btn_today = self.ui.items_layout.itemAtPosition(self.currentMonth-1, self.currentDay-1).widget()
        new_styleSheet = (str(btn_today.styleSheet()) + "border: 2px solid rgb(28, 113, 216);" + "border-radius:3px;")
        btn_today.setStyleSheet(new_styleSheet)

        

        

                        
        
    def changeMod0(self):
        
        self.lavel = 0
        self.reverseColor()
        self.ui.btn_1l.setStyleSheet("background-color: rgb(17, 22, 29);"
                              "border: 2px solid rgb(28, 113, 216);"
                              "border-radius:3px;")

    def changeMod1(self):
        self.lavel = 1
        self.reverseColor()
        self.ui.btn_2l.setStyleSheet("background-color: rgb(3, 58, 22);"
                              "border: 2px solid rgb(28, 113, 216);"
                              "border-radius:3px;")
        


    def changeMod2(self):
        self.lavel = 2
        self.reverseColor()
        self.ui.btn_3l.setStyleSheet("background-color: rgb(25, 108, 46);"
                              "border: 2px solid rgb(28, 113, 216);"
                              "border-radius:3px;")
    def changeMod3(self):
        self.lavel = 3
        self.reverseColor()
        self.ui.btn_4l.setStyleSheet("background-color: rgb(46, 160, 67);"
                              "border: 2px solid rgb(28, 113, 216);"
                              "border-radius:3px;")
    def changeMod4(self):
        self.lavel = 4
        self.reverseColor()
        self.ui.btn_5l.setStyleSheet("background-color: rgb(86, 211, 100);"
                              "border: 2px solid rgb(28, 113, 216);"
                              "border-radius:3px;")

    

    def setValue(self, btn):
        if self.lavel == 0:
            btn.setStyleSheet("background-color: rgb(17, 22, 29);")
            btn.setObjectName("0")
        elif self.lavel == 1:
            btn.setStyleSheet("background-color: rgb(3, 58, 22);")
            btn.setObjectName("1")
        elif self.lavel == 2:
            btn.setStyleSheet("background-color: rgb(25, 108, 46);")
            btn.setObjectName("2")
        elif self.lavel == 3:
            btn.setStyleSheet("background-color: rgb(46, 160, 67);")
            btn.setObjectName("3")
        elif self.lavel == 4:
            btn.setStyleSheet("background-color: rgb(86, 211, 100);")
            btn.setObjectName("4")

    def reverseColor(self):

        self.ui.btn_1l.setStyleSheet("background-color: rgb(21, 27, 35);")

        self.ui.btn_2l.setStyleSheet("background-color: rgb(3, 58, 22);")

        self.ui.btn_3l.setStyleSheet("background-color: rgb(25, 108, 46);")

        self.ui.btn_4l.setStyleSheet("background-color: rgb(46, 160, 67);")

        self.ui.btn_5l.setStyleSheet("background-color: rgb(86, 211, 100);")


    def closeEvent(self, event):
        with open("save.txt","w") as save:
            data = ""
            for y in range(31):
                for x in range(12):

                    if (x,y) in self.blackListDate:
                        data += "0"
                    else:
                        data += self.ui.items_layout.itemAtPosition(x,y).widget().objectName()
                        
            save.write(data)
        event.accept()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = App()
    window.show()
    sys.exit(app.exec_())
